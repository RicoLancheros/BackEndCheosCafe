// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users model - matches MySQL users table
model User {
  id            String   @id @default(uuid()) @db.VarChar(36)
  email         String   @unique @db.VarChar(255)
  password      String   @db.VarChar(255)
  name          String   @db.VarChar(255)
  phone         String?  @db.VarChar(20)
  address       String?  @db.Text
  role          Role     @default(CUSTOMER)
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens RefreshToken[]
  orders        Order[]
  reviews       Review[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

// Refresh tokens model - matches MySQL refresh_tokens table
model RefreshToken {
  id        String   @id @default(uuid()) @db.VarChar(36)
  token     String   @unique @db.VarChar(500)
  userId    String   @map("user_id") @db.VarChar(36)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// Products model - matches MySQL products table
model Product {
  id          String  @id @default(uuid()) @db.VarChar(36)
  sku         String  @unique @db.VarChar(50)
  name        String  @db.VarChar(255)
  description String  @db.Text
  price       Decimal @db.Decimal(10, 2)
  stock       Int     @default(0) @db.UnsignedInt
  minStock    Int     @default(10) @map("min_stock") @db.UnsignedInt
  image       String  @db.VarChar(500)
  images      Json?   @db.Json
  weight      String  @db.VarChar(50)
  origin      String? @db.VarChar(100)
  roastLevel  String? @map("roast_level") @db.VarChar(50)
  notes       String? @db.Text
  active      Boolean @default(true)
  featured    Boolean @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  orderItems OrderItem[]
  reviews    Review[]

  @@index([sku])
  @@index([active])
  @@index([featured])
  @@index([price])
  @@map("products")
}

// Orders model - matches MySQL orders table
model Order {
  id               String           @id @default(uuid()) @db.VarChar(36)
  orderNumber      String           @unique @map("order_number") @db.VarChar(20)
  userId           String           @map("user_id") @db.VarChar(36)
  subtotal         Decimal          @db.Decimal(10, 2)
  discount         Decimal          @default(0) @db.Decimal(10, 2)
  shipping         Decimal          @db.Decimal(10, 2)
  tax              Decimal          @default(0) @db.Decimal(10, 2)
  total            Decimal          @db.Decimal(10, 2)
  paymentMethod    PaymentMethod    @map("payment_method")
  paymentStatus    PaymentStatus    @default(PENDING) @map("payment_status")
  mercadopagoId    String?          @map("mercadopago_id") @db.VarChar(255)
  paymentDetails   Json?            @map("payment_details") @db.Json
  deliveryStatus   DeliveryStatus   @default(PENDING) @map("delivery_status")
  shippingAddress  Json             @map("shipping_address") @db.Json
  billingAddress   Json?            @map("billing_address") @db.Json
  trackingNumber   String?          @map("tracking_number") @db.VarChar(100)
  estimatedDelivery DateTime?       @map("estimated_delivery")
  deliveredAt      DateTime?        @map("delivered_at")
  utmSource        String?          @map("utm_source") @db.VarChar(100)
  utmMedium        String?          @map("utm_medium") @db.VarChar(100)
  utmCampaign      String?          @map("utm_campaign") @db.VarChar(100)
  discountCode     String?          @map("discount_code") @db.VarChar(50)
  notes            String?          @db.Text
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  items OrderItem[]

  @@index([orderNumber])
  @@index([userId])
  @@index([paymentStatus])
  @@index([deliveryStatus])
  @@index([createdAt(sort: Desc)])
  @@map("orders")
}

// Order Items model - matches MySQL order_items table
model OrderItem {
  id        String   @id @default(uuid()) @db.VarChar(36)
  orderId   String   @map("order_id") @db.VarChar(36)
  productId String   @map("product_id") @db.VarChar(36)
  quantity  Int      @db.UnsignedInt
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// Reviews model - matches MySQL reviews table
model Review {
  id        String   @id @default(uuid()) @db.VarChar(36)
  userId    String   @map("user_id") @db.VarChar(36)
  productId String   @map("product_id") @db.VarChar(36)
  rating    Int      @db.UnsignedTinyInt
  title     String?  @db.VarChar(255)
  comment   String?  @db.Text
  verified  Boolean  @default(false)
  helpful   Int      @default(0) @db.UnsignedInt
  images    Json?    @db.Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "unique_user_product")
  @@index([productId])
  @@index([rating])
  @@index([verified])
  @@map("reviews")
}

// Locations model - matches MySQL locations table
model Location {
  id         String   @id @default(uuid()) @db.VarChar(36)
  name       String   @db.VarChar(255)
  slug       String   @unique @db.VarChar(255)
  city       String   @db.VarChar(100)
  department String   @default("Antioquia") @db.VarChar(100)
  address    String   @db.Text
  lat        Decimal  @db.Decimal(10, 8)
  lng        Decimal  @db.Decimal(11, 8)
  phone      String?  @db.VarChar(20)
  whatsapp   String?  @db.VarChar(20)
  hours      Json     @db.Json
  imageUrl   String?  @map("image_url") @db.VarChar(500)
  active     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([slug])
  @@index([city])
  @@index([active])
  @@map("locations")
}

// Discount Codes model - matches MySQL discount_codes table
model DiscountCode {
  id          String            @id @default(uuid()) @db.VarChar(36)
  code        String            @unique @db.VarChar(50)
  description String?           @db.VarChar(255)
  type        DiscountType
  value       Decimal           @db.Decimal(10, 2)
  minAmount   Decimal?          @map("min_amount") @db.Decimal(10, 2)
  maxDiscount Decimal?          @map("max_discount") @db.Decimal(10, 2)
  maxUses     Int?              @map("max_uses") @db.UnsignedInt
  usedCount   Int               @default(0) @map("used_count") @db.UnsignedInt
  validFrom   DateTime          @map("valid_from")
  validUntil  DateTime          @map("valid_until")
  active      Boolean           @default(true)
  conditions  Json?             @db.Json
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@index([code])
  @@index([active])
  @@index([validFrom, validUntil])
  @@map("discount_codes")
}

// Email Logs model - matches MySQL email_logs table
model EmailLog {
  id         String      @id @default(uuid()) @db.VarChar(36)
  toEmail    String      @map("to_email") @db.VarChar(255)
  subject    String      @db.VarChar(255)
  template   String      @db.VarChar(100)
  status     EmailStatus
  sendgridId String?     @map("sendgrid_id") @db.VarChar(255)
  error      String?     @db.Text
  metadata   Json?       @db.Json
  createdAt  DateTime    @default(now()) @map("created_at")

  @@index([toEmail])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("email_logs")
}

// Audit Logs model - matches MySQL audit_logs table
model AuditLog {
  id         String   @id @default(uuid()) @db.VarChar(36)
  userId     String?  @map("user_id") @db.VarChar(36)
  action     String   @db.VarChar(100)
  entity     String   @db.VarChar(100)
  entityId   String   @map("entity_id") @db.VarChar(50)
  oldValues  Json?    @map("old_values") @db.Json
  newValues  Json?    @map("new_values") @db.Json
  ip         String?  @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt(sort: Desc)])
  @@map("audit_logs")
}

// Enums matching MySQL ENUM types
enum Role {
  CUSTOMER
  ADMIN
}

enum PaymentMethod {
  MERCADO_PAGO
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  CONFIRMED
  PREPARING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  RETURNED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}